name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-20.04, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Auto-increment version
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Increment patch version
          NEW_VERSION=$(node -p "
            const version = '$CURRENT_VERSION'.split('.');
            version[2] = parseInt(version[2]) + 1;
            version.join('.');
          ")
          echo "New version: $NEW_VERSION"
          
          # Update package.json
          npm version $NEW_VERSION --no-git-tag-version
          
          # Update Cargo.toml
          sed -i.bak "s/version = \".*\"/version = \"$NEW_VERSION\"/" src-tauri/Cargo.toml
          
          # Update tauri.conf.json
          node -e "
            const fs = require('fs');
            const config = JSON.parse(fs.readFileSync('src-tauri/tauri.conf.json', 'utf8'));
            config.version = '$NEW_VERSION';
            fs.writeFileSync('src-tauri/tauri.conf.json', JSON.stringify(config, null, 2));
          "
          
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: v__VERSION__
          releaseName: 'LiveLayer v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          includeDebug: false
          includeRelease: true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: livelayer-${{ matrix.platform }}
          path: |
            src-tauri/target/release/bundle/
            !src-tauri/target/release/bundle/**/.*